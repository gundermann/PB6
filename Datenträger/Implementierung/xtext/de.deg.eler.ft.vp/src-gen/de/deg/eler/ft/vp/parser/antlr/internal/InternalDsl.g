/*
* generated by Xtext
*/
grammar InternalDsl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package de.deg.eler.ft.vp.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.deg.eler.ft.vp.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.deg.eler.ft.vp.services.DslGrammarAccess;

}

@parser::members {

 	private DslGrammarAccess grammarAccess;
 	
    public InternalDslParser(TokenStream input, DslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Konfiguration";	
   	}
   	
   	@Override
   	protected DslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleKonfiguration
entryRuleKonfiguration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getKonfigurationRule()); }
	 iv_ruleKonfiguration=ruleKonfiguration 
	 { $current=$iv_ruleKonfiguration.current; } 
	 EOF 
;

// Rule Konfiguration
ruleKonfiguration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getKonfigurationAccess().getUsedidsUsedIDsParserRuleCall_0_0()); 
	    }
		lv_usedids_0_0=ruleUsedIDs		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKonfigurationRule());
	        }
       		add(
       			$current, 
       			"usedids",
        		lv_usedids_0_0, 
        		"UsedIDs");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getKonfigurationAccess().getSpezantragszuweisungSPEZ_ANTRAGSZUWEISUNGParserRuleCall_1_0()); 
	    }
		lv_spezantragszuweisung_1_0=ruleSPEZ_ANTRAGSZUWEISUNG		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKonfigurationRule());
	        }
       		add(
       			$current, 
       			"spezantragszuweisung",
        		lv_spezantragszuweisung_1_0, 
        		"SPEZ_ANTRAGSZUWEISUNG");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getKonfigurationAccess().getAntragszuweisungZuweisungParserRuleCall_2_0()); 
	    }
		lv_antragszuweisung_2_0=ruleZuweisung		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKonfigurationRule());
	        }
       		add(
       			$current, 
       			"antragszuweisung",
        		lv_antragszuweisung_2_0, 
        		"Zuweisung");
	        afterParserOrEnumRuleCall();
	    }

)
)*((
(
		{ 
	        newCompositeNode(grammarAccess.getKonfigurationAccess().getVwkpkonfigurationfueraktionVwkpaktionkonfiguraktionParserRuleCall_3_0_0()); 
	    }
		lv_vwkpkonfigurationfueraktion_3_0=rulevwkpaktionkonfiguraktion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKonfigurationRule());
	        }
       		add(
       			$current, 
       			"vwkpkonfigurationfueraktion",
        		lv_vwkpkonfigurationfueraktion_3_0, 
        		"vwkpaktionkonfiguraktion");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getKonfigurationAccess().getPruefungsaktionPRUEFUNGSAKTIONParserRuleCall_3_1_0()); 
	    }
		lv_pruefungsaktion_4_0=rulePRUEFUNGSAKTION		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKonfigurationRule());
	        }
       		add(
       			$current, 
       			"pruefungsaktion",
        		lv_pruefungsaktion_4_0, 
        		"PRUEFUNGSAKTION");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getKonfigurationAccess().getPruefungsklassennamePRUEFUNGSKLASSENNAMEParserRuleCall_3_2_0()); 
	    }
		lv_pruefungsklassenname_5_0=rulePRUEFUNGSKLASSENNAME		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKonfigurationRule());
	        }
       		add(
       			$current, 
       			"pruefungsklassenname",
        		lv_pruefungsklassenname_5_0, 
        		"PRUEFUNGSKLASSENNAME");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getKonfigurationAccess().getPruefungskurzbezeichnungPRUEFUNGSKURZTEXTParserRuleCall_3_3_0()); 
	    }
		lv_pruefungskurzbezeichnung_6_0=rulePRUEFUNGSKURZTEXT		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKonfigurationRule());
	        }
       		add(
       			$current, 
       			"pruefungskurzbezeichnung",
        		lv_pruefungskurzbezeichnung_6_0, 
        		"PRUEFUNGSKURZTEXT");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getKonfigurationAccess().getPruefungslangtextPRUEFUNGSLANGTEXTParserRuleCall_3_4_0()); 
	    }
		lv_pruefungslangtext_7_0=rulePRUEFUNGSLANGTEXT		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKonfigurationRule());
	        }
       		add(
       			$current, 
       			"pruefungslangtext",
        		lv_pruefungslangtext_7_0, 
        		"PRUEFUNGSLANGTEXT");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getKonfigurationAccess().getPruefungswirkungPRUEFUNGSWIRKUNGParserRuleCall_3_5_0()); 
	    }
		lv_pruefungswirkung_8_0=rulePRUEFUNGSWIRKUNG		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKonfigurationRule());
	        }
       		add(
       			$current, 
       			"pruefungswirkung",
        		lv_pruefungswirkung_8_0, 
        		"PRUEFUNGSWIRKUNG");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getKonfigurationAccess().getPruefungsichtbarkeitPRUEFUNGSICHTBARKEITParserRuleCall_3_6_0()); 
	    }
		lv_pruefungsichtbarkeit_9_0=rulePRUEFUNGSICHTBARKEIT		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKonfigurationRule());
	        }
       		add(
       			$current, 
       			"pruefungsichtbarkeit",
        		lv_pruefungsichtbarkeit_9_0, 
        		"PRUEFUNGSICHTBARKEIT");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulePRUEFUNGSICHTBARKEIT
entryRulePRUEFUNGSICHTBARKEIT returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPRUEFUNGSICHTBARKEITRule()); } 
	 iv_rulePRUEFUNGSICHTBARKEIT=rulePRUEFUNGSICHTBARKEIT 
	 { $current=$iv_rulePRUEFUNGSICHTBARKEIT.current.getText(); }  
	 EOF 
;

// Rule PRUEFUNGSICHTBARKEIT
rulePRUEFUNGSICHTBARKEIT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='PruefungSichtbar.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPRUEFUNGSICHTBARKEITAccess().getPruefungSichtbarKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getPRUEFUNGSICHTBARKEITAccess().getPRUEFUNGParserRuleCall_1()); 
    }
    this_PRUEFUNG_1=rulePRUEFUNG    {
		$current.merge(this_PRUEFUNG_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=' =' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPRUEFUNGSICHTBARKEITAccess().getSpaceEqualsSignKeyword_2()); 
    }
)
    ;





// Entry rule entryRulevwkpaktionkonfiguraktion
entryRulevwkpaktionkonfiguraktion returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getVwkpaktionkonfiguraktionRule()); } 
	 iv_rulevwkpaktionkonfiguraktion=rulevwkpaktionkonfiguraktion 
	 { $current=$iv_rulevwkpaktionkonfiguraktion.current.getText(); }  
	 EOF 
;

// Rule vwkpaktionkonfiguraktion
rulevwkpaktionkonfiguraktion returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='VWKPKonfiguration.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVwkpaktionkonfiguraktionAccess().getVWKPKonfigurationKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getVwkpaktionkonfiguraktionAccess().getVWKPTYPParserRuleCall_1()); 
    }
    this_VWKPTYP_1=ruleVWKPTYP    {
		$current.merge(this_VWKPTYP_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='.Aktion.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVwkpaktionkonfiguraktionAccess().getAktionKeyword_2()); 
    }

    { 
        newCompositeNode(grammarAccess.getVwkpaktionkonfiguraktionAccess().getPRUEFUNGParserRuleCall_3()); 
    }
    this_PRUEFUNG_3=rulePRUEFUNG    {
		$current.merge(this_PRUEFUNG_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=' = ' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVwkpaktionkonfiguraktionAccess().getSpaceEqualsSignSpaceKeyword_4()); 
    }

    { 
        newCompositeNode(grammarAccess.getVwkpaktionkonfiguraktionAccess().getAKTIONParserRuleCall_5()); 
    }
    this_AKTION_5=ruleAKTION    {
		$current.merge(this_AKTION_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleVWKPTYP
entryRuleVWKPTYP returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getVWKPTYPRule()); } 
	 iv_ruleVWKPTYP=ruleVWKPTYP 
	 { $current=$iv_ruleVWKPTYP.current.getText(); }  
	 EOF 
;

// Rule VWKPTYP
ruleVWKPTYP returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='Automatisch' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVWKPTYPAccess().getAutomatischKeyword_0()); 
    }

    |
	kw='Manuell' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVWKPTYPAccess().getManuellKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleSPEZ_ANTRAGSZUWEISUNG
entryRuleSPEZ_ANTRAGSZUWEISUNG returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSPEZ_ANTRAGSZUWEISUNGRule()); } 
	 iv_ruleSPEZ_ANTRAGSZUWEISUNG=ruleSPEZ_ANTRAGSZUWEISUNG 
	 { $current=$iv_ruleSPEZ_ANTRAGSZUWEISUNG.current.getText(); }  
	 EOF 
;

// Rule SPEZ_ANTRAGSZUWEISUNG
ruleSPEZ_ANTRAGSZUWEISUNG returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getSPEZ_ANTRAGSZUWEISUNGAccess().getINTTerminalRuleCall_0()); 
    }

	kw=' = ' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSPEZ_ANTRAGSZUWEISUNGAccess().getSpaceEqualsSignSpaceKeyword_1()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getSPEZ_ANTRAGSZUWEISUNGAccess().getPRUEFUNGParserRuleCall_2_0()); 
    }
    this_PRUEFUNG_2=rulePRUEFUNG    {
		$current.merge(this_PRUEFUNG_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSPEZ_ANTRAGSZUWEISUNGAccess().getCommaKeyword_2_1()); 
    }
)*
    { 
        newCompositeNode(grammarAccess.getSPEZ_ANTRAGSZUWEISUNGAccess().getPRUEFUNGParserRuleCall_3()); 
    }
    this_PRUEFUNG_4=rulePRUEFUNG    {
		$current.merge(this_PRUEFUNG_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulePRUEFUNGSLANGTEXT
entryRulePRUEFUNGSLANGTEXT returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPRUEFUNGSLANGTEXTRule()); } 
	 iv_rulePRUEFUNGSLANGTEXT=rulePRUEFUNGSLANGTEXT 
	 { $current=$iv_rulePRUEFUNGSLANGTEXT.current.getText(); }  
	 EOF 
;

// Rule PRUEFUNGSLANGTEXT
rulePRUEFUNGSLANGTEXT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='PruefungLangtext.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPRUEFUNGSLANGTEXTAccess().getPruefungLangtextKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getPRUEFUNGSLANGTEXTAccess().getPRUEFUNGParserRuleCall_1()); 
    }
    this_PRUEFUNG_1=rulePRUEFUNG    {
		$current.merge(this_PRUEFUNG_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=' = ' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPRUEFUNGSLANGTEXTAccess().getSpaceEqualsSignSpaceKeyword_2()); 
    }
    this_STRING_3=RULE_STRING    {
		$current.merge(this_STRING_3);
    }

    { 
    newLeafNode(this_STRING_3, grammarAccess.getPRUEFUNGSLANGTEXTAccess().getSTRINGTerminalRuleCall_3()); 
    }
)
    ;





// Entry rule entryRulePRUEFUNGSKURZTEXT
entryRulePRUEFUNGSKURZTEXT returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPRUEFUNGSKURZTEXTRule()); } 
	 iv_rulePRUEFUNGSKURZTEXT=rulePRUEFUNGSKURZTEXT 
	 { $current=$iv_rulePRUEFUNGSKURZTEXT.current.getText(); }  
	 EOF 
;

// Rule PRUEFUNGSKURZTEXT
rulePRUEFUNGSKURZTEXT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='PruefungKurzbezeichnung.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPRUEFUNGSKURZTEXTAccess().getPruefungKurzbezeichnungKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getPRUEFUNGSKURZTEXTAccess().getPRUEFUNGParserRuleCall_1()); 
    }
    this_PRUEFUNG_1=rulePRUEFUNG    {
		$current.merge(this_PRUEFUNG_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=' = ' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPRUEFUNGSKURZTEXTAccess().getSpaceEqualsSignSpaceKeyword_2()); 
    }
    this_STRING_3=RULE_STRING    {
		$current.merge(this_STRING_3);
    }

    { 
    newLeafNode(this_STRING_3, grammarAccess.getPRUEFUNGSKURZTEXTAccess().getSTRINGTerminalRuleCall_3()); 
    }
)
    ;





// Entry rule entryRulePRUEFUNGSKLASSENNAME
entryRulePRUEFUNGSKLASSENNAME returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPRUEFUNGSKLASSENNAMERule()); } 
	 iv_rulePRUEFUNGSKLASSENNAME=rulePRUEFUNGSKLASSENNAME 
	 { $current=$iv_rulePRUEFUNGSKLASSENNAME.current.getText(); }  
	 EOF 
;

// Rule PRUEFUNGSKLASSENNAME
rulePRUEFUNGSKLASSENNAME returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='PruefungKlassenname.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPRUEFUNGSKLASSENNAMEAccess().getPruefungKlassennameKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getPRUEFUNGSKLASSENNAMEAccess().getPRUEFUNGParserRuleCall_1()); 
    }
    this_PRUEFUNG_1=rulePRUEFUNG    {
		$current.merge(this_PRUEFUNG_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=' = ' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPRUEFUNGSKLASSENNAMEAccess().getSpaceEqualsSignSpaceKeyword_2()); 
    }

    { 
        newCompositeNode(grammarAccess.getPRUEFUNGSKLASSENNAMEAccess().getKLASSEParserRuleCall_3()); 
    }
    this_KLASSE_3=ruleKLASSE    {
		$current.merge(this_KLASSE_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulePRUEFUNGSAKTION
entryRulePRUEFUNGSAKTION returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPRUEFUNGSAKTIONRule()); } 
	 iv_rulePRUEFUNGSAKTION=rulePRUEFUNGSAKTION 
	 { $current=$iv_rulePRUEFUNGSAKTION.current.getText(); }  
	 EOF 
;

// Rule PRUEFUNGSAKTION
rulePRUEFUNGSAKTION returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='PruefungAktion.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPRUEFUNGSAKTIONAccess().getPruefungAktionKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getPRUEFUNGSAKTIONAccess().getAKTIONSIDParserRuleCall_1()); 
    }
    this_AKTIONSID_1=ruleAKTIONSID    {
		$current.merge(this_AKTIONSID_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=' = ' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPRUEFUNGSAKTIONAccess().getSpaceEqualsSignSpaceKeyword_2()); 
    }

    { 
        newCompositeNode(grammarAccess.getPRUEFUNGSAKTIONAccess().getAKTIONParserRuleCall_3()); 
    }
    this_AKTION_3=ruleAKTION    {
		$current.merge(this_AKTION_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleAKTIONSID
entryRuleAKTIONSID returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAKTIONSIDRule()); } 
	 iv_ruleAKTIONSID=ruleAKTIONSID 
	 { $current=$iv_ruleAKTIONSID.current.getText(); }  
	 EOF 
;

// Rule AKTIONSID
ruleAKTIONSID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAKTIONSIDAccess().getPRUEFUNGParserRuleCall_0()); 
    }
    this_PRUEFUNG_0=rulePRUEFUNG    {
		$current.merge(this_PRUEFUNG_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAKTIONSIDAccess().getFullStopKeyword_1()); 
    }
    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    newLeafNode(this_INT_2, grammarAccess.getAKTIONSIDAccess().getINTTerminalRuleCall_2()); 
    }
)
    ;





// Entry rule entryRulePRUEFUNGSWIRKUNG
entryRulePRUEFUNGSWIRKUNG returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPRUEFUNGSWIRKUNGRule()); } 
	 iv_rulePRUEFUNGSWIRKUNG=rulePRUEFUNGSWIRKUNG 
	 { $current=$iv_rulePRUEFUNGSWIRKUNG.current.getText(); }  
	 EOF 
;

// Rule PRUEFUNGSWIRKUNG
rulePRUEFUNGSWIRKUNG returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='PruefungWirkung.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPRUEFUNGSWIRKUNGAccess().getPruefungWirkungKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getPRUEFUNGSWIRKUNGAccess().getWIRKUNGSIDParserRuleCall_1()); 
    }
    this_WIRKUNGSID_1=ruleWIRKUNGSID    {
		$current.merge(this_WIRKUNGSID_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=' = ' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPRUEFUNGSWIRKUNGAccess().getSpaceEqualsSignSpaceKeyword_2()); 
    }

    { 
        newCompositeNode(grammarAccess.getPRUEFUNGSWIRKUNGAccess().getWIRKUNGParserRuleCall_3()); 
    }
    this_WIRKUNG_3=ruleWIRKUNG    {
		$current.merge(this_WIRKUNG_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleWIRKUNGSID
entryRuleWIRKUNGSID returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getWIRKUNGSIDRule()); } 
	 iv_ruleWIRKUNGSID=ruleWIRKUNGSID 
	 { $current=$iv_ruleWIRKUNGSID.current.getText(); }  
	 EOF 
;

// Rule WIRKUNGSID
ruleWIRKUNGSID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getWIRKUNGSIDAccess().getPRUEFUNGParserRuleCall_0()); 
    }
    this_PRUEFUNG_0=rulePRUEFUNG    {
		$current.merge(this_PRUEFUNG_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getWIRKUNGSIDAccess().getFullStopKeyword_1()); 
    }
    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    newLeafNode(this_INT_2, grammarAccess.getWIRKUNGSIDAccess().getINTTerminalRuleCall_2()); 
    }
)
    ;





// Entry rule entryRuleZuweisung
entryRuleZuweisung returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getZuweisungRule()); } 
	 iv_ruleZuweisung=ruleZuweisung 
	 { $current=$iv_ruleZuweisung.current.getText(); }  
	 EOF 
;

// Rule Zuweisung
ruleZuweisung returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='DvAntragsArt.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getZuweisungAccess().getDvAntragsArtKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getZuweisungAccess().getANTRAGSARTParserRuleCall_1()); 
    }
    this_ANTRAGSART_1=ruleANTRAGSART    {
		$current.merge(this_ANTRAGSART_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=' = ' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getZuweisungAccess().getSpaceEqualsSignSpaceKeyword_2()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getZuweisungAccess().getPRUEFUNGParserRuleCall_3_0()); 
    }
    this_PRUEFUNG_3=rulePRUEFUNG    {
		$current.merge(this_PRUEFUNG_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getZuweisungAccess().getCommaKeyword_3_1()); 
    }
)*
    { 
        newCompositeNode(grammarAccess.getZuweisungAccess().getPRUEFUNGParserRuleCall_4()); 
    }
    this_PRUEFUNG_5=rulePRUEFUNG    {
		$current.merge(this_PRUEFUNG_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleUsedIDs
entryRuleUsedIDs returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getUsedIDsRule()); } 
	 iv_ruleUsedIDs=ruleUsedIDs 
	 { $current=$iv_ruleUsedIDs.current.getText(); }  
	 EOF 
;

// Rule UsedIDs
ruleUsedIDs returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='CodesAlle = ' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUsedIDsAccess().getCodesAlleKeyword_0()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getUsedIDsAccess().getPRUEFUNGParserRuleCall_1_0()); 
    }
    this_PRUEFUNG_1=rulePRUEFUNG    {
		$current.merge(this_PRUEFUNG_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUsedIDsAccess().getCommaKeyword_1_1()); 
    }
)*
    { 
        newCompositeNode(grammarAccess.getUsedIDsAccess().getPRUEFUNGParserRuleCall_2()); 
    }
    this_PRUEFUNG_3=rulePRUEFUNG    {
		$current.merge(this_PRUEFUNG_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulePRUEFUNG
entryRulePRUEFUNG returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPRUEFUNGRule()); } 
	 iv_rulePRUEFUNG=rulePRUEFUNG 
	 { $current=$iv_rulePRUEFUNG.current.getText(); }  
	 EOF 
;

// Rule PRUEFUNG
rulePRUEFUNG returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getPRUEFUNGAccess().getINTTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleWIRKUNG
entryRuleWIRKUNG returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getWIRKUNGRule()); } 
	 iv_ruleWIRKUNG=ruleWIRKUNG 
	 { $current=$iv_ruleWIRKUNG.current.getText(); }  
	 EOF 
;

// Rule WIRKUNG
ruleWIRKUNG returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='VERHINDERT_AKTION' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getWIRKUNGAccess().getVERHINDERT_AKTIONKeyword_0()); 
    }

    |
	kw='OHNE' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getWIRKUNGAccess().getOHNEKeyword_1()); 
    }

    |
	kw='WARNUNG' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getWIRKUNGAccess().getWARNUNGKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleANTRAGSART
entryRuleANTRAGSART returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getANTRAGSARTRule()); } 
	 iv_ruleANTRAGSART=ruleANTRAGSART 
	 { $current=$iv_ruleANTRAGSART.current.getText(); }  
	 EOF 
;

// Rule ANTRAGSART
ruleANTRAGSART returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='AUSZANTRAG' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getANTRAGSARTAccess().getAUSZANTRAGKeyword_0()); 
    }

    |
	kw='ERWANTRAG' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getANTRAGSARTAccess().getERWANTRAGKeyword_1()); 
    }

    |
	kw='NEUANTRAG' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getANTRAGSARTAccess().getNEUANTRAGKeyword_2()); 
    }

    |
	kw='VERLANTRAG' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getANTRAGSARTAccess().getVERLANTRAGKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleAKTION
entryRuleAKTION returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAKTIONRule()); } 
	 iv_ruleAKTION=ruleAKTION 
	 { $current=$iv_ruleAKTION.current.getText(); }  
	 EOF 
;

// Rule AKTION
ruleAKTION returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='BerechnenUndPruefen' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAKTIONAccess().getBerechnenUndPruefenKeyword_0()); 
    }

    |
	kw='DokumentBearbeitungBeginnen' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAKTIONAccess().getDokumentBearbeitungBeginnenKeyword_1()); 
    }

    |
	kw='Zurueckziehen' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAKTIONAccess().getZurueckziehenKeyword_2()); 
    }

    |
	kw='NachberechnungStornieren' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAKTIONAccess().getNachberechnungStornierenKeyword_3()); 
    }

    |
	kw='ZurueckziehenZuruecknehmen' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAKTIONAccess().getZurueckziehenZuruecknehmenKeyword_4()); 
    }

    |
	kw='AntragFreigeben' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAKTIONAccess().getAntragFreigebenKeyword_5()); 
    }

    |
	kw='AntragFreigabeZurueck' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAKTIONAccess().getAntragFreigabeZurueckKeyword_6()); 
    }

    |
	kw='DokumentBearbeitungBeenden' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAKTIONAccess().getDokumentBearbeitungBeendenKeyword_7()); 
    }

    |
	kw='AntragBewilligen' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAKTIONAccess().getAntragBewilligenKeyword_8()); 
    }

    |
	kw='AntragAblehnen' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAKTIONAccess().getAntragAblehnenKeyword_9()); 
    }

    |
	kw='AntragZahlungAnweisen' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAKTIONAccess().getAntragZahlungAnweisenKeyword_10()); 
    }

    |
	kw='AntragEntscheidungZurueck' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAKTIONAccess().getAntragEntscheidungZurueckKeyword_11()); 
    }

    |
	kw='AntragNeuBearbeiten' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAKTIONAccess().getAntragNeuBearbeitenKeyword_12()); 
    }

    |
	kw='AntragWidersprechen' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAKTIONAccess().getAntragWidersprechenKeyword_13()); 
    }

    |
	kw='AntragWiderspruchAblZurueck' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAKTIONAccess().getAntragWiderspruchAblZurueckKeyword_14()); 
    }

    |
	kw='AntragWiderspruchZurueck' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAKTIONAccess().getAntragWiderspruchZurueckKeyword_15()); 
    }

    |
	kw='AntragWiderspruchAblehnen' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAKTIONAccess().getAntragWiderspruchAblehnenKeyword_16()); 
    }

    |
	kw='AntragWiderspruchZulassen' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAKTIONAccess().getAntragWiderspruchZulassenKeyword_17()); 
    }

    |
	kw='AntragWiderspruchZulZurueck' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAKTIONAccess().getAntragWiderspruchZulZurueckKeyword_18()); 
    }

    |
	kw='AntragWiderspruchStattgeben' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAKTIONAccess().getAntragWiderspruchStattgebenKeyword_19()); 
    }
)
    ;





// Entry rule entryRuleKLASSE
entryRuleKLASSE returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getKLASSERule()); } 
	 iv_ruleKLASSE=ruleKLASSE 
	 { $current=$iv_ruleKLASSE.current.getText(); }  
	 EOF 
;

// Rule KLASSE
ruleKLASSE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.AbstractAumPruefalgorithmusAusRechenschritt' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenAbstractAumPruefalgorithmusAusRechenschrittKeyword_0()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.AbstractAumPruefalgorithmusBagatellbetragTeilmassnahmen' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenAbstractAumPruefalgorithmusBagatellbetragTeilmassnahmenKeyword_1()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PA4AugenPrinzip' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPA4AugenPrinzipKeyword_2()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAAblehnungsgruendeVorhanden' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAAblehnungsgruendeVorhandenKeyword_3()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAAbsichtlicheFalschangabenArt17Abs1' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAAbsichtlicheFalschangabenArt17Abs1Keyword_4()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAAbsichtlicheFalschangabenBezugVerstoesseVJ' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAAbsichtlicheFalschangabenBezugVerstoesseVJKeyword_5()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAAbsichtlichFalscheAngaben' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAAbsichtlichFalscheAngabenKeyword_6()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAAbsichtlichFalscheAngabenStichtag' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAAbsichtlichFalscheAngabenStichtagKeyword_7()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAAbsichtlichFalschGemachteUnregelmaessigkeit' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAAbsichtlichFalschGemachteUnregelmaessigkeitKeyword_8()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAAbtretungenInZahlungVorhanden' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAAbtretungenInZahlungVorhandenKeyword_9()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAAbzuegeErhoehung' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAAbzuegeErhoehungKeyword_10()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAAbzugNichtfoerderfAnteileGefuelltBeiUnternehmensformWaldgemeinschaft' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAAbzugNichtfoerderfAnteileGefuelltBeiUnternehmensformWaldgemeinschaftKeyword_11()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAAllgemeineAngaben' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAAllgemeineAngabenKeyword_12()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAAllgemeineAngabenBeendetOhneAenderungsblatt' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAAllgemeineAngabenBeendetOhneAenderungsblattKeyword_13()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAAltverpflichtungUeberschritten' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAAltverpflichtungUeberschrittenKeyword_14()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAAnlageFlaechenAUM' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAAnlageFlaechenAUMKeyword_15()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAAnlageFlaechenBeendet' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAAnlageFlaechenBeendetKeyword_16()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAAnlageFlaechenBeendetStichtag' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAAnlageFlaechenBeendetStichtagKeyword_17()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAAnlageFlaechenBeendetVJ' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAAnlageFlaechenBeendetVJKeyword_18()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAAnlageFlaechenErsterfassungBeendetAJ' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAAnlageFlaechenErsterfassungBeendetAJKeyword_19()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAAnlageFlaechenInBearbeitung' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAAnlageFlaechenInBearbeitungKeyword_20()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAAnlageFlaechenInBearbeitungStichtag' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAAnlageFlaechenInBearbeitungStichtagKeyword_21()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAAnlageTierhaltung' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAAnlageTierhaltungKeyword_22()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAAnteilBluehflaeche' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAAnteilBluehflaecheKeyword_23()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAAnteilGetreide' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAAnteilGetreideKeyword_24()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAAnteilGetreideAusnahmeArt18' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAAnteilGetreideAusnahmeArt18Keyword_25()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAAnteilGruenland' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAAnteilGruenlandKeyword_26()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAAnteilHauptfruchtartenMax30Prozent' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAAnteilHauptfruchtartenMax30ProzentKeyword_27()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAAnteilHauptfruchtartenMax30ProzentAusnahmeArt18' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAAnteilHauptfruchtartenMax30ProzentAusnahmeArt18Keyword_28()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAAnteilHauptfruchtartenMin10Prozent' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAAnteilHauptfruchtartenMin10ProzentKeyword_29()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAAnteilHauptfruchtartenMin10ProzentAusnahmeArt18' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAAnteilHauptfruchtartenMin10ProzentAusnahmeArt18Keyword_30()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAAnteilKkLeguminosenAL5Prozent' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAAnteilKkLeguminosenAL5ProzentKeyword_31()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAAnteilLeguminosen' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAAnteilLeguminosenKeyword_32()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAAnteilLeguminosenAusnahmeArt18' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAAnteilLeguminosenAusnahmeArt18Keyword_33()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAAntragseingang' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAAntragseingangKeyword_34()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAAntragseingangNichtNachAusschlussTermin' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAAntragseingangNichtNachAusschlussTerminKeyword_35()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAAntragseingangStichtag' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAAntragseingangStichtagKeyword_36()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAAntragsflaeche' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAAntragsflaecheKeyword_37()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAAntragsteller' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAAntragstellerKeyword_38()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAAntragstellerKeineJuristischePerson' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAAntragstellerKeineJuristischePersonKeyword_39()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAAntragstermin' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAAntragsterminKeyword_40()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAAntragsterminNichtVerfristet' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAAntragsterminNichtVerfristetKeyword_41()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAAntragVJBewilligt' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAAntragVJBewilligtKeyword_42()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAAntragVJNichtAbgelehnt' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAAntragVJNichtAbgelehntKeyword_43()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAAntragZurueckziehen' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAAntragZurueckziehenKeyword_44()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAAnzahlHauptfruchtartenAusnahmeArt18' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAAnzahlHauptfruchtartenAusnahmeArt18Keyword_45()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAAnzahlHauptfruchtartenInklusiveLeguminosen' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAAnzahlHauptfruchtartenInklusiveLeguminosenKeyword_46()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAAnzahlStreuobstBaeumeNichtGroesserAls100ProHa' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAAnzahlStreuobstBaeumeNichtGroesserAls100ProHaKeyword_47()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAAnzahlStreuobstBaeumeNichtKleinerAls30' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAAnzahlStreuobstBaeumeNichtKleinerAls30Keyword_48()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAAumFlaechenAbgleichAJ' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAAumFlaechenAbgleichAJKeyword_49()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAAumFlaechenAbgleichAJStichtag' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAAumFlaechenAbgleichAJStichtagKeyword_50()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAAumFlaechenAbgleichVJ' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAAumFlaechenAbgleichVJKeyword_51()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAAumFlaechenmappe' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAAumFlaechenmappeKeyword_52()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAAumFlaechenmappeAktuellUndDurchgefuehrt' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAAumFlaechenmappeAktuellUndDurchgefuehrtKeyword_53()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAAumFNNichtUnvollstaendigUndHatKeinAnederungsBlatt' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAAumFNNichtUnvollstaendigUndHatKeinAnederungsBlattKeyword_54()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAAumKuliZuMaAZLAktuellUndBeendet' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAAumKuliZuMaAZLAktuellUndBeendetKeyword_55()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAAumKuliZuMaUZWAktuellUndBeendet' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAAumKuliZuMaUZWAktuellUndBeendetKeyword_56()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAAumTierbestandsnachweis' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAAumTierbestandsnachweisKeyword_57()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAAumTierbestandsnachweisBeendet' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAAumTierbestandsnachweisBeendetKeyword_58()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAAusbringungstechnik' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAAusbringungstechnikKeyword_59()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAAusgleichsleistungenInAnderenBLUndFlaecheNichtGefuellt' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAAusgleichsleistungenInAnderenBLUndFlaecheNichtGefuelltKeyword_60()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAAusschluss' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAAusschlussKeyword_61()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PABagatellbetragAuszahlung' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPABagatellbetragAuszahlungKeyword_62()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PABagatellbetragBerechnung' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPABagatellbetragBerechnungKeyword_63()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PABagatellbetragBerechnungBeruecksichtigungHalbeZahlung' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPABagatellbetragBerechnungBeruecksichtigungHalbeZahlungKeyword_64()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PABagatellbetragBerechnungEVP_RL2002' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPABagatellbetragBerechnungEVP_RL2002Keyword_65()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PABagatellbetragBerechnungEVP_RL2007' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPABagatellbetragBerechnungEVP_RL2007Keyword_66()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PABagatellbetragBerechnungUeberGesamteLaufzeit' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPABagatellbetragBerechnungUeberGesamteLaufzeitKeyword_67()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PABagatellbetragNeuAntrag' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPABagatellbetragNeuAntragKeyword_68()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PABagatellbetragRueckforderung' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPABagatellbetragRueckforderungKeyword_69()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PABankverbindung' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPABankverbindungKeyword_70()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PABankverbindungStichtag' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPABankverbindungStichtagKeyword_71()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PABeantragteFlaecheKleiner80Prozent' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPABeantragteFlaecheKleiner80ProzentKeyword_72()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PABeantragtGLGleichGesamtGL' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPABeantragtGLGleichGesamtGLKeyword_73()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PABeantragtMindestens5ProzAckerflaeche' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPABeantragtMindestens5ProzAckerflaecheKeyword_74()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PABeantragtNichtKleiner10ProzAckerflaeche' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPABeantragtNichtKleiner10ProzAckerflaecheKeyword_75()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PABeantragtNichtKleiner2ha' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPABeantragtNichtKleiner2haKeyword_76()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PABeantragtNichtKleiner5ProzAckerflaeche' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPABeantragtNichtKleiner5ProzAckerflaecheKeyword_77()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PABesatzAusHITUnterBeruecksichtigungGruenland' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPABesatzAusHITUnterBeruecksichtigungGruenlandKeyword_78()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PABesatzRgvDglMinBeantragtFestgestelltGrEq0_2' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPABesatzRgvDglMinBeantragtFestgestelltGrEq0_2Keyword_79()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PABesatzRgvDglMinBeantragtFestgestelltGrEq0_3' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPABesatzRgvDglMinBeantragtFestgestelltGrEq0_3Keyword_80()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PABesatzZwischen0_2Und1_0RgvProHaHFFInklBestNCAusHIT' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPABesatzZwischen0_2Und1_0RgvProHaHFFInklBestNCAusHITKeyword_81()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PABescheidInAktuellerBerechnung' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPABescheidInAktuellerBerechnungKeyword_82()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PABestaetigungsVermerk' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPABestaetigungsVermerkKeyword_83()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PABewilligterNAImEAJ' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPABewilligterNAImEAJKeyword_84()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PACCGesamtbewertungsmappeAktuell' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPACCGesamtbewertungsmappeAktuellKeyword_85()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PACCGesamtbewertungsmappeAktuellUndBeendet' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPACCGesamtbewertungsmappeAktuellUndBeendetKeyword_86()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PADatumEingangGroesserAntrag' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPADatumEingangGroesserAntragKeyword_87()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PADifferenzBewilligtVJUndBeantragtGroesserBagatellbetrag' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPADifferenzBewilligtVJUndBeantragtGroesserBagatellbetragKeyword_88()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PADifferenzVerpflichtungsflaeche' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPADifferenzVerpflichtungsflaecheKeyword_89()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PADifferenzVerpflichtungsflaecheWiederholt' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPADifferenzVerpflichtungsflaecheWiederholtKeyword_90()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAEinhaltungCC' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAEinhaltungCCKeyword_91()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAEinhaltungCCV' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAEinhaltungCCVKeyword_92()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAEinhaltungCCVImVJ' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAEinhaltungCCVImVJKeyword_93()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAEinhaltungUmfangDGL' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAEinhaltungUmfangDGLKeyword_94()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAEinhaltungUmfangDGLSchwellwert' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAEinhaltungUmfangDGLSchwellwertKeyword_95()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAEinhaltungUmfangVerpflichtungsflaeche' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAEinhaltungUmfangVerpflichtungsflaecheKeyword_96()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAEntscheidungenBescheidart' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAEntscheidungenBescheidartKeyword_97()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAErstantragsjahr' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAErstantragsjahrKeyword_98()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAErweiterungKleiner10bzw2haOdGroesser50ProzentVJ' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAErweiterungKleiner10bzw2haOdGroesser50ProzentVJKeyword_99()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAErweiterungKleiner10odGroesser50ProzentVJ' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAErweiterungKleiner10odGroesser50ProzentVJKeyword_100()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAErweiterungKleinerGleich50Proz' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAErweiterungKleinerGleich50ProzKeyword_101()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAErweiterungKleinerGleich50ProzOder2Ha' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAErweiterungKleinerGleich50ProzOder2HaKeyword_102()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAErweiterungLE50ProzentVJ' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAErweiterungLE50ProzentVJKeyword_103()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAErweiterungsflaecheVorhanden' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAErweiterungsflaecheVorhandenKeyword_104()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAExtensiveBewirtschaftungGLGleichGesamtGL' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAExtensiveBewirtschaftungGLGleichGesamtGLKeyword_105()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAFahrlaessigFalscheAngaben' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAFahrlaessigFalscheAngabenKeyword_106()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAFahrlaessigFalscheAngabenStichtag' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAFahrlaessigFalscheAngabenStichtagKeyword_107()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAFalschangabenArt16Abs5' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAFalschangabenArt16Abs5Keyword_108()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAFalschangabenArt16Abs6' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAFalschangabenArt16Abs6Keyword_109()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAFalschangabenArt16Abs6inAnderemFP' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAFalschangabenArt16Abs6inAnderemFPKeyword_110()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAFalschangabenArt18Abs3' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAFalschangabenArt18Abs3Keyword_111()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAFalschGemachteAngaben' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAFalschGemachteAngabenKeyword_112()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAFlaecheFoerderfaehigGroesserNull' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAFlaecheFoerderfaehigGroesserNullKeyword_113()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAFlaecheFoerdergebietGroesserGleich3Hektar' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAFlaecheFoerdergebietGroesserGleich3HektarKeyword_114()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAFlaecheM141Mindestens5ProzentAFAusEaj' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAFlaecheM141Mindestens5ProzentAFAusEajKeyword_115()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAFlaecheM14Mindestens5ProzentAFAusEaj' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAFlaecheM14Mindestens5ProzentAFAusEajKeyword_116()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAFlaecheStreuobstwiesen' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAFlaecheStreuobstwiesenKeyword_117()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAGebuehrenrechnung' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAGebuehrenrechnungKeyword_118()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAGesamtabweichung30Prozent' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAGesamtabweichung30ProzentKeyword_119()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAGesamtabweichung50Prozent' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAGesamtabweichung50ProzentKeyword_120()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAGesamtrueckforderung' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAGesamtrueckforderungKeyword_121()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAGesamtsanktionierung' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAGesamtsanktionierungKeyword_122()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAGLAnteilNichtZuGross' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAGLAnteilNichtZuGrossKeyword_123()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAGLAnteilNichtZuKlein' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAGLAnteilNichtZuKleinKeyword_124()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAGrfImAA' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAGrfImAAKeyword_125()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAGrobFahrlaessigeGemachteAngaben' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAGrobFahrlaessigeGemachteAngabenKeyword_126()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAGuellemenge' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAGuellemengeKeyword_127()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAHofuebergabe' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAHofuebergabeKeyword_128()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAImkerBestaetigungVorhanden' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAImkerBestaetigungVorhandenKeyword_129()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAImkerVereinbarungVorhanden' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAImkerVereinbarungVorhandenKeyword_130()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAKapitalbeteiligungOeffentlHandGroesser25Proz' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAKapitalbeteiligungOeffentlHandGroesser25ProzKeyword_131()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAKeinAntragVorhanden' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAKeinAntragVorhandenKeyword_132()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAKeinBescheidInAktuellerBerechnung' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAKeinBescheidInAktuellerBerechnungKeyword_133()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAKeinDungAufnahmeOderAbgabe' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAKeinDungAufnahmeOderAbgabeKeyword_134()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAKeineAblehnungsgruendeVorhanden' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAKeineAblehnungsgruendeVorhandenKeyword_135()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAKeineAblehnungsgruendeVorhandenTm' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAKeineAblehnungsgruendeVorhandenTmKeyword_136()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAKeineParalleBeantragungM5UndM6' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAKeineParalleBeantragungM5UndM6Keyword_137()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAKeinePheromonGemeinschaft' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAKeinePheromonGemeinschaftKeyword_138()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAKeineRechtsformAktiengesellschaft' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAKeineRechtsformAktiengesellschaftKeyword_139()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAKeineRechtsformAnstaltDesOeffentlRechts' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAKeineRechtsformAnstaltDesOeffentlRechtsKeyword_140()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAKeineRechtsformGmbH' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAKeineRechtsformGmbHKeyword_141()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAKeineRechtsformJuristischePersonOeffentlRecht' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAKeineRechtsformJuristischePersonOeffentlRechtKeyword_142()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAKeineRechtsformKoerperschaftDesOeffentlichenRechts' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAKeineRechtsformKoerperschaftDesOeffentlichenRechtsKeyword_143()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAKeineRechtsformOeffentlRechtlStiftung' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAKeineRechtsformOeffentlRechtlStiftungKeyword_144()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAKeineRechtsformPrivatRechtlStiftung' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAKeineRechtsformPrivatRechtlStiftungKeyword_145()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAKeineRechtsformSonstigeJuristischePersonOeffentlRecht' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAKeineRechtsformSonstigeJuristischePersonOeffentlRechtKeyword_146()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAKeineRechtsformSonstigeJuristischePersonPrivatRecht' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAKeineRechtsformSonstigeJuristischePersonPrivatRechtKeyword_147()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAKeineRechtsformSonstigeNatuerlichePerson' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAKeineRechtsformSonstigeNatuerlichePersonKeyword_148()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAKeineRelevantenEntscheidungenOffen' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAKeineRelevantenEntscheidungenOffenKeyword_149()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAKeineUnternehmensformAnerkannteWeidegemeinschaft' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAKeineUnternehmensformAnerkannteWeidegemeinschaftKeyword_150()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAKeineUnternehmensformEinzelantragstellerMeka' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAKeineUnternehmensformEinzelantragstellerMekaKeyword_151()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAKeineUnternehmensformPheromongemeinschaft' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAKeineUnternehmensformPheromongemeinschaftKeyword_152()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAKeineUnternehmensformWaldgemeinschaft' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAKeineUnternehmensformWaldgemeinschaftKeyword_153()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAKeinFC104anBindungVorhanden' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAKeinFC104anBindungVorhandenKeyword_154()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAKeinGLAusErzeugungGenommenNutzung592' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAKeinGLAusErzeugungGenommenNutzung592Keyword_155()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAKeinKlaerschlammAusgebracht' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAKeinKlaerschlammAusgebrachtKeyword_156()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAKeinWiderspruchImPEB' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAKeinWiderspruchImPEBKeyword_157()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAKeinWiderspruchImPEB2' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAKeinWiderspruchImPEB2Keyword_158()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAKombinierteGLAntraege' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAKombinierteGLAntraegeKeyword_159()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAKontrollkostenzuschussMitND2Teilmassnahme' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAKontrollkostenzuschussMitND2TeilmassnahmeKeyword_160()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAKontrollprotokoll' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAKontrollprotokollKeyword_161()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAKontrollvertrag' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAKontrollvertragKeyword_162()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAKulturgruppenAbweichung20Prozent' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAKulturgruppenAbweichung20ProzentKeyword_163()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAKulturgruppenAbweichung30Prozent' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAKulturgruppenAbweichung30ProzentKeyword_164()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAKulturgruppenAbweichung50Prozent' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAKulturgruppenAbweichung50ProzentKeyword_165()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAKulturgruppenAbweichung50ProzentB1610' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAKulturgruppenAbweichung50ProzentB1610Keyword_166()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAKulturgruppenAbweichung50ProzentVJ' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAKulturgruppenAbweichung50ProzentVJKeyword_167()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PALaborbeanstandungenLiegenNichtVor' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPALaborbeanstandungenLiegenNichtVorKeyword_168()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PALandwirt' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPALandwirtKeyword_169()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAMantelbogen' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAMantelbogenKeyword_170()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAMantelbogenStichtag' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAMantelbogenStichtagKeyword_171()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAMaschinelleBerechnungVJ' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAMaschinelleBerechnungVJKeyword_172()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAMaximalbesatz1_4RgvProHaHFF' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAMaximalbesatz1_4RgvProHaHFFKeyword_173()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAMaximalbesatz1_4RgvProHaHFFAusHIT' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAMaximalbesatz1_4RgvProHaHFFAusHITKeyword_174()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAMaximalbesatz1_4RgvProHaHFFAusnahmeArt18' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAMaximalbesatz1_4RgvProHaHFFAusnahmeArt18Keyword_175()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAMaximalbesatz2GveProHaLNF' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAMaximalbesatz2GveProHaLNFKeyword_176()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAMaximalbesatz2GveProHaLNF2010' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAMaximalbesatz2GveProHaLNF2010Keyword_177()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAMaximalbesatz2GveProHaLNFAusHIT' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAMaximalbesatz2GveProHaLNFAusHITKeyword_178()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAMaximalbesatz2GveProHaLNFAusnahmeArt18' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAMaximalbesatz2GveProHaLNFAusnahmeArt18Keyword_179()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAMindestFlaeche' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAMindestFlaecheKeyword_180()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAMindestumfangWinterbegruenung' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAMindestumfangWinterbegruenungKeyword_181()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAMinimalbesatz0_2RgvProHaHFF' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAMinimalbesatz0_2RgvProHaHFFKeyword_182()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAMinimalbesatz0_2RgvProHaHFFAusHIT' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAMinimalbesatz0_2RgvProHaHFFAusHITKeyword_183()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAMinimalbesatz0_3GveProHaLNF' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAMinimalbesatz0_3GveProHaLNFKeyword_184()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAMinimalbesatz0_3RgvProHaGL' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAMinimalbesatz0_3RgvProHaGLKeyword_185()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAMinimalbesatz0_3RgvProHaHFF' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAMinimalbesatz0_3RgvProHaHFFKeyword_186()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAMinimalbesatz0_3RgvProHaHFFAusHIT' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAMinimalbesatz0_3RgvProHaHFFAusHITKeyword_187()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAMinimalbesatz0_3RgvProHaHFFAusnahmeArt18' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAMinimalbesatz0_3RgvProHaHFFAusnahmeArt18Keyword_188()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAMinimalbesatz0_5RgvProHaGL' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAMinimalbesatz0_5RgvProHaGLKeyword_189()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAMinimalbesatz0_6GVEProHaFF' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAMinimalbesatz0_6GVEProHaFFKeyword_190()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAMittelverwaltung' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAMittelverwaltungKeyword_191()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PANachOeffnenBerechnet' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPANachOeffnenBerechnetKeyword_192()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PANichtAlleChecksWurdenBearbeitet' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPANichtAlleChecksWurdenBearbeitetKeyword_193()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PANichtZuWenigAckerfutterAngebaut' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPANichtZuWenigAckerfutterAngebautKeyword_194()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PANurNachberechnungStornierbar' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPANurNachberechnungStornierbarKeyword_195()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAParallelBewilligterNABeiEajGleichAj' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAParallelBewilligterNABeiEajGleichAjKeyword_196()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAParallelerAAEntschieden' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAParallelerAAEntschiedenKeyword_197()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAParallelerAntragFP773' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAParallelerAntragFP773Keyword_198()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAParallelerAntragZuFP774' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAParallelerAntragZuFP774Keyword_199()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAPebVollstaendig' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAPebVollstaendigKeyword_200()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAPebVollstaendigLZJ' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAPebVollstaendigLZJKeyword_201()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAQualitaetssicherung' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAQualitaetssicherungKeyword_202()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAQualitaetssicherungFlaechenmappeVj' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAQualitaetssicherungFlaechenmappeVjKeyword_203()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAQualitaetssicherungVj' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAQualitaetssicherungVjKeyword_204()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAReferenzflaechenAbgleich' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAReferenzflaechenAbgleichKeyword_205()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAReferenzflaechenAbgleichBeendetVJ' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAReferenzflaechenAbgleichBeendetVJKeyword_206()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAReferenzflaechenAbgleichDurchgefuehrtVJ' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAReferenzflaechenAbgleichDurchgefuehrtVJKeyword_207()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PARentenempfaenger' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPARentenempfaengerKeyword_208()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PARentenempfaengerAlsEinzelunternehmer' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPARentenempfaengerAlsEinzelunternehmerKeyword_209()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PARestlaufzeit' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPARestlaufzeitKeyword_210()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PARestlaufzeitEinJahr' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPARestlaufzeitEinJahrKeyword_211()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PARestlaufzeitVNS' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPARestlaufzeitVNSKeyword_212()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PARiaVJVokAJ' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPARiaVJVokAJKeyword_213()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PARiaVok' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPARiaVokKeyword_214()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PARiaVokCc' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPARiaVokCcKeyword_215()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PARiaVokStichtag' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPARiaVokStichtagKeyword_216()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PARiaVokVJ' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPARiaVokVJKeyword_217()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PARueckforderungen' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPARueckforderungenKeyword_218()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PARueckforderungenOderNullzahlung' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPARueckforderungenOderNullzahlungKeyword_219()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PASGAbgleich' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPASGAbgleichKeyword_220()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PASonstFeststellungenAbsichtlUnregelmaessigkeiten' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPASonstFeststellungenAbsichtlUnregelmaessigkeitenKeyword_221()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PASonstigeFeststellungen' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPASonstigeFeststellungenKeyword_222()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PASonstigeFeststellungenStichtag' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPASonstigeFeststellungenStichtagKeyword_223()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PASonstigeFeststellungenVJ' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPASonstigeFeststellungenVJKeyword_224()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PASperrvermerkNichtVergeben' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPASperrvermerkNichtVergebenKeyword_225()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAStammdatenAktuell' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAStammdatenAktuellKeyword_226()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAStichtagHelper' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAStichtagHelperKeyword_227()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PATeilmassnahmeND1UndND2Beantragt' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPATeilmassnahmeND1UndND2BeantragtKeyword_228()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PATierbesatzGesamt' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPATierbesatzGesamtKeyword_229()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PATierbestandEingehaltenRgvProHaHFF' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPATierbestandEingehaltenRgvProHaHFFKeyword_230()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PATierbestandEingehaltenRgvProHaHFFundGveProHaLF' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPATierbestandEingehaltenRgvProHaHFFundGveProHaLFKeyword_231()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PATierbestandEingehaltenRgvProHaHFFZusNCs' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPATierbestandEingehaltenRgvProHaHFFZusNCsKeyword_232()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAUmwandlungALInGL' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAUmwandlungALInGLKeyword_233()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAUnternehmenAusserhalbDerEU' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAUnternehmenAusserhalbDerEUKeyword_234()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAUnternehmenOhneSchafeZiegenMitVertragVereinbarung' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAUnternehmenOhneSchafeZiegenMitVertragVereinbarungKeyword_235()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAUnternehmenssitzInBw' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAUnternehmenssitzInBwKeyword_236()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAUnterschiedBerechneteUndManuelleVerpflFlFJ' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAUnterschiedBerechneteUndManuelleVerpflFlFJKeyword_237()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAUnterschreitungTierbestzDurchFeststellung' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAUnterschreitungTierbestzDurchFeststellungKeyword_238()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAUnzulaessigeNC' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAUnzulaessigeNCKeyword_239()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAUnzulaessigeNcVNS' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAUnzulaessigeNcVNSKeyword_240()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAUnzulaessigeVerringerungVerpflFlaecheAckerfutter' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAUnzulaessigeVerringerungVerpflFlaecheAckerfutterKeyword_241()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAUnzulaessigeVerringerungVerpflFlaecheWinterbegruenung' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAUnzulaessigeVerringerungVerpflFlaecheWinterbegruenungKeyword_242()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAVerlaengerungsdokumentimVJVorhanden' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAVerlaengerungsdokumentimVJVorhandenKeyword_243()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAVerlaengerungsdokumentVorhanden' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAVerlaengerungsdokumentVorhandenKeyword_244()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAVerstossArt18' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAVerstossArt18Keyword_245()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAVerstossArt18NurArt18Beanstandungen' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAVerstossArt18NurArt18BeanstandungenKeyword_246()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAVerstossArt18NurArt18BeanstandungenVJ' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAVerstossArt18NurArt18BeanstandungenVJKeyword_247()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAVerstossArt18VJ' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAVerstossArt18VJKeyword_248()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAVerstossArt18VJFuerMindEineBindung' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAVerstossArt18VJFuerMindEineBindungKeyword_249()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAVertragsNrFuerAlleFlaechenVergeben' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAVertragsNrFuerAlleFlaechenVergebenKeyword_250()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAVertragsnummer' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAVertragsnummerKeyword_251()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAVertragVorhanden' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAVertragVorhandenKeyword_252()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAVeterinaerBestaetigungVorhanden' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAVeterinaerBestaetigungVorhandenKeyword_253()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAVOKBeendet' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAVOKBeendetKeyword_254()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAVOKBeendetStichtag' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAVOKBeendetStichtagKeyword_255()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAVOKBeendetVJ' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAVOKBeendetVJKeyword_256()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAVOKCCBeendet' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAVOKCCBeendetKeyword_257()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAVokNichtVerweigert' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAVokNichtVerweigertKeyword_258()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAVWKPEnthaeltBenutzerdefPruefkonf' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAVWKPEnthaeltBenutzerdefPruefkonfKeyword_259()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAVWKReferenzflaechenAbgleich' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAVWKReferenzflaechenAbgleichKeyword_260()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAVwkZIDAntragsteller' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAVwkZIDAntragstellerKeyword_261()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAVwkZIDAntragstellerStichtag' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAVwkZIDAntragstellerStichtagKeyword_262()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAWeidetagebuchImPebVorhanden' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAWeidetagebuchImPebVorhandenKeyword_263()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAWiderspruchInVorherigerBerechnung' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAWiderspruchInVorherigerBerechnungKeyword_264()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAZFK' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAZFKKeyword_265()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAZFKStichtag' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAZFKStichtagKeyword_266()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.pruefungen.PAZFKVJ' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgPruefungenPAZFKVJKeyword_267()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.business.pruefungen.PASperrvermerkNichtVergeben' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgBusinessPruefungenPASperrvermerkNichtVergebenKeyword_268()); 
    }

    |
	kw='DE.data_experts.profi.profilcs.antrag.aum.allg.business.pruefungen.PAAumKuliZuMaAZLAktuellUndBeendet' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKLASSEAccess().getDEData_expertsProfiProfilcsAntragAumAllgBusinessPruefungenPAAumKuliZuMaAZLAktuellUndBeendetKeyword_269()); 
    }
)
    ;





RULE_SL_COMMENT : '#' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


