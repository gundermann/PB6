/*
* generated by Xtext
*/
package de.deg.eler.ft.vp.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import de.deg.eler.ft.vp.services.DslGrammarAccess;

public class DslParser extends AbstractContentAssistParser {
	
	@Inject
	private DslGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected de.deg.eler.ft.vp.ui.contentassist.antlr.internal.InternalDslParser createParser() {
		de.deg.eler.ft.vp.ui.contentassist.antlr.internal.InternalDslParser result = new de.deg.eler.ft.vp.ui.contentassist.antlr.internal.InternalDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getKonfigurationAccess().getAlternatives_3(), "rule__Konfiguration__Alternatives_3");
					put(grammarAccess.getVWKPTYPAccess().getAlternatives(), "rule__VWKPTYP__Alternatives");
					put(grammarAccess.getWIRKUNGAccess().getAlternatives(), "rule__WIRKUNG__Alternatives");
					put(grammarAccess.getANTRAGSARTAccess().getAlternatives(), "rule__ANTRAGSART__Alternatives");
					put(grammarAccess.getAKTIONAccess().getAlternatives(), "rule__AKTION__Alternatives");
					put(grammarAccess.getKLASSEAccess().getAlternatives(), "rule__KLASSE__Alternatives");
					put(grammarAccess.getKonfigurationAccess().getGroup(), "rule__Konfiguration__Group__0");
					put(grammarAccess.getPRUEFUNGSICHTBARKEITAccess().getGroup(), "rule__PRUEFUNGSICHTBARKEIT__Group__0");
					put(grammarAccess.getVwkpaktionkonfiguraktionAccess().getGroup(), "rule__Vwkpaktionkonfiguraktion__Group__0");
					put(grammarAccess.getSPEZ_ANTRAGSZUWEISUNGAccess().getGroup(), "rule__SPEZ_ANTRAGSZUWEISUNG__Group__0");
					put(grammarAccess.getSPEZ_ANTRAGSZUWEISUNGAccess().getGroup_2(), "rule__SPEZ_ANTRAGSZUWEISUNG__Group_2__0");
					put(grammarAccess.getPRUEFUNGSLANGTEXTAccess().getGroup(), "rule__PRUEFUNGSLANGTEXT__Group__0");
					put(grammarAccess.getPRUEFUNGSKURZTEXTAccess().getGroup(), "rule__PRUEFUNGSKURZTEXT__Group__0");
					put(grammarAccess.getPRUEFUNGSKLASSENNAMEAccess().getGroup(), "rule__PRUEFUNGSKLASSENNAME__Group__0");
					put(grammarAccess.getPRUEFUNGSAKTIONAccess().getGroup(), "rule__PRUEFUNGSAKTION__Group__0");
					put(grammarAccess.getAKTIONSIDAccess().getGroup(), "rule__AKTIONSID__Group__0");
					put(grammarAccess.getPRUEFUNGSWIRKUNGAccess().getGroup(), "rule__PRUEFUNGSWIRKUNG__Group__0");
					put(grammarAccess.getWIRKUNGSIDAccess().getGroup(), "rule__WIRKUNGSID__Group__0");
					put(grammarAccess.getZuweisungAccess().getGroup(), "rule__Zuweisung__Group__0");
					put(grammarAccess.getZuweisungAccess().getGroup_3(), "rule__Zuweisung__Group_3__0");
					put(grammarAccess.getUsedIDsAccess().getGroup(), "rule__UsedIDs__Group__0");
					put(grammarAccess.getUsedIDsAccess().getGroup_1(), "rule__UsedIDs__Group_1__0");
					put(grammarAccess.getKonfigurationAccess().getUsedidsAssignment_0(), "rule__Konfiguration__UsedidsAssignment_0");
					put(grammarAccess.getKonfigurationAccess().getSpezantragszuweisungAssignment_1(), "rule__Konfiguration__SpezantragszuweisungAssignment_1");
					put(grammarAccess.getKonfigurationAccess().getAntragszuweisungAssignment_2(), "rule__Konfiguration__AntragszuweisungAssignment_2");
					put(grammarAccess.getKonfigurationAccess().getVwkpkonfigurationfueraktionAssignment_3_0(), "rule__Konfiguration__VwkpkonfigurationfueraktionAssignment_3_0");
					put(grammarAccess.getKonfigurationAccess().getPruefungsaktionAssignment_3_1(), "rule__Konfiguration__PruefungsaktionAssignment_3_1");
					put(grammarAccess.getKonfigurationAccess().getPruefungsklassennameAssignment_3_2(), "rule__Konfiguration__PruefungsklassennameAssignment_3_2");
					put(grammarAccess.getKonfigurationAccess().getPruefungskurzbezeichnungAssignment_3_3(), "rule__Konfiguration__PruefungskurzbezeichnungAssignment_3_3");
					put(grammarAccess.getKonfigurationAccess().getPruefungslangtextAssignment_3_4(), "rule__Konfiguration__PruefungslangtextAssignment_3_4");
					put(grammarAccess.getKonfigurationAccess().getPruefungswirkungAssignment_3_5(), "rule__Konfiguration__PruefungswirkungAssignment_3_5");
					put(grammarAccess.getKonfigurationAccess().getPruefungsichtbarkeitAssignment_3_6(), "rule__Konfiguration__PruefungsichtbarkeitAssignment_3_6");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			de.deg.eler.ft.vp.ui.contentassist.antlr.internal.InternalDslParser typedParser = (de.deg.eler.ft.vp.ui.contentassist.antlr.internal.InternalDslParser) parser;
			typedParser.entryRuleKonfiguration();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public DslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(DslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
